<?php
/**
 * MultiHook.
 *
 * @copyright Zikula Team (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Zikula Team <info@ziku.la>.
 * @link https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

namespace Zikula\MultiHookModule\Collector;

/**
 * Needle collector implementation class.
 */
class NeedleCollector
{
    /**
     * List of service objects
     * @var array
     */
    private $needles;

    /**
     * NeedleCollector constructor.
     */
    public function __construct()
    {
        $this->needles = [];
    }

    /**
     * Adds a needle to the collection.
     *
     * @param object $needle
     */
    public function add($needle)
    {
        $id = '';
        if (method_exists($needle, 'getBundleName')) {
            $id .= $needle->getBundleName();
        }
        if (method_exists($needle, 'getName')) {
            $id .= $needle->getName();
        } elseif (method_exists($needle, 'getTitle')) {
            $id .= $needle->getTitle();
        }

        $this->needles[$id] = $needle;
    }

    /**
     * Returns a needle from the collection by service.id.
     *
     * @param $id
     * @return object
     */
    public function get($id)
    {
        return isset($this->needles[$id]) ? $this->needles[$id] : null;
    }

    /**
     * Returns all needles in the collection.
     *
     * @return object[]
     */
    public function getAll()
    {
        $this->sortNeedles();

        return $this->needles;
    }

    /**
     * Returns all active needles in the collection.
     *
     * @return object[]
     */
    public function getActive()
    {
        return array_filter($this->getAll(), function($item) {
            return method_exists($item, 'isActive') ? $item->isActive() : false;
        });
    }

    /**
     * Sorts available needles by their title.
     */
    private function sortNeedles() {
        $needles = $this->needles;
        usort($needles, function ($a, $b) {
            if (!method_exists($a, 'getTitle') || !method_exists($b, 'getTitle')) {
                return 0;
            }

            return strcmp($a->getTitle(), $b->getTitle());
        });
        $this->needles = $needles;
    }
}
