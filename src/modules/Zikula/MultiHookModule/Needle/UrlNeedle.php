<?php
/**
 * MultiHook.
 *
 * @copyright Zikula Team (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Zikula Team <info@ziku.la>.
 * @link https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

namespace Zikula\MultiHookModule\Needle;

use Symfony\Component\HttpFoundation\RequestStack;
use Zikula\Common\Translator\TranslatorInterface;

/**
 * URL needle
 */
class UrlNeedle
{
    /**
     * Translator instance
     *
     * @var TranslatorInterface
     */
    private $translator;

    /**
     * @var RequestStack
     */
    private $requestStack;

    /**
     * @var string
     */
    private $cssClassForExternalLinks;

    /**
     * Bundle name
     *
     * @var string
     */
    private $bundleName;

    /**
     * The name of this provider
     *
     * @var string
     */
    private $name;

    /**
     * UrlNeedle constructor.
     *
     * @param TranslatorInterface $translator
     */
    public function __construct(
        TranslatorInterface $translator,
        RequestStack $requestStack,
        $cssClassForExternalLinks
    ) {
        $this->translator = $translator;
        $this->requestStack = $requestStack;
        $this->cssClassForExternalLinks = $cssClassForExternalLinks;

        $nsParts = explode('\\', get_class($this));
        $vendor = $nsParts[0];
        $nameAndType = $nsParts[1];

        $this->bundleName = $vendor . $nameAndType;
        $this->name = str_replace('Needle', '', array_pop($nsParts));
    }

    /**
     * Returns the bundle name.
     *
     * @return string
     */
    public function getBundleName()
    {
        return $this->bundleName;
    }

    /**
     * Returns the name of this needle.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Returns the icon name (FontAwesome icon code suffix, e.g. "pencil").
     *
     * @return string
     */
    public function getIcon()
    {
        return 'globe';
    }

    /**
     * Returns the title of this needle.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->translator->__('URLs', 'zikulamultihookmodule');
    }

    /**
     * Returns the description of this needle.
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->translator->__('Makes URLs clickable, works with http, https, ftp and mailto URLs.', 'zikulamultihookmodule');
    }

    /**
     * Returns usage information shown on settings page.
     *
     * @return string
     */
    public function getUsageInfo()
    {
        return $this->translator->__('https://www.example.com', 'zikulamultihookmodule');
    }

    /**
     * Returns whether this needle is active or not.
     *
     * @return boolean
     */
    public function isActive()
    {
        return true;
    }

    /**
     * Returns whether this needle is case sensitive or not.
     *
     * @return boolean
     */
    public function isCaseSensitive()
    {
        return false;
    }

    /**
     * Returns the needle subject entries.
     *
     * @return string[]
     */
    public function getSubjects()
    {
        return ['http://', 'https://', 'ftp://', 'mailto://'];
    }

    /**
     * Applies the needle functionality.
     *
     * @param string $needleId
     * @param string $needleText
     *
     * @return string
     */
    public function apply($needleId, $needleText)
    {
        if (empty($needleId)) {
            return $needleId;
        }

        $request = $this->requestStack->getCurrentRequest();
        $baseUrl = $request->getSchemeAndHttpHost() . $request->getBasePath();

        // simple replacement, no need to cache anything
        $url = htmlspecialchars($needleText . $needleId);

        $extclass = '';
        if (false === stristr($baseUrl, $url)) {
            if (!empty($this->cssClassForExternalLinks)) {
                $extclass = ' class="' . $this->cssClassForExternalLinks . '"';
            }
        }

        $result = '<a href="' . $url . '"' . $extclass . '>' . $url . '</a>'; 

        return $result;
    }
}
