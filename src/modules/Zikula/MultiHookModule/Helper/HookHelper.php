<?php
/**
 * MultiHook.
 *
 * @copyright Zikula Team (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Zikula Team <info@ziku.la>.
 * @link https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

namespace Zikula\MultiHookModule\Helper;

use Zikula\MultiHookModule\Helper\Base\AbstractHookHelper;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;

/**
 * Helper implementation class for hook related methods.
 */
class HookHelper extends AbstractHookHelper
{
    /**
     * @var VariableApiInterface
     */
    private $variableApi;    

    public function setVariableApi(VariableApiInterface $variableApi)
    {
        $this->variableApi = $variableApi;
    }
    
    public function create_abbr($abac, $showEditLink=false)
    {
        $replaceAbbreviationsWithLongText = $this->variableApi->get('ZikulaMultiHookModule', 'replaceAbbreviationsWithLongText', false);

        $long = $abac['longform'];
        $short = $abac['shortform'];
        $aid = $abac['aid'];

        $replace_temp = '';
        if (false === $replaceAbbreviationsWithLongText) {
            $xhtmllang = $this->get_xhtml_language($abac['language']);
            $replace_temp = '<abbr' . $xhtmllang . ' title="' . str_replace('"', '', $long) . '"><span class="abbr" title="' . str_replace('"', '', $long) . '">' . $short . '</span></abbr>';
        } else {
            $replace_temp = $long;
        }
        /**
        if (true === $showEditLink) {
            $replace_temp = '<span>' . $replace_temp . '<img src="modules/MultiHook/images/edit.gif" width="7" height="7" alt="" class="multihookeditlink" title="' . str_replace('"', '', __('Edit', $dom)) . ': ' . $short . ' (' . str_replace('"', '', __('Abbreviations', $dom)) . ') #' . $aid . '" />' . '</span>';
        }
        */

        return $replace_temp;
    }
    
    public function create_acronym($abac, $showEditLink=false)
    {
        $longform = $abac['longform'];
        $shortform = $abac['shortform'];
        $aid = $abac['aid'];

        $xhtmllang = $this->get_xhtml_language($abac['language']);
        $replace_temp = '<acronym' . $xhtmllang . ' title="' . str_replace('"', '', $longform) . '">' . $shortform . '</acronym>';

        /**
        if (true === $showEditLink) {
            $replace_temp = '<span>' . $replace_temp . '<img src="modules/MultiHook/images/edit.gif" width="7" height="7" alt="" class="multihookeditlink" title="' . str_replace('"', '', __('Edit', $dom)) . ': ' . $short . ' (' . str_replace('"', '', __('Acronyms', $dom)) . ') #' . $aid . '" />' . '</span>';
        }
        */

        return $replace_temp;
    }

    public function create_link($abac, $showEditLink=false)
    {
        $replaceLinksWithTitle = $this->variableApi->get('ZikulaMultiHookModule', 'replaceLinksWithTitle', false);
        $cssClassForExternalLinks = $this->variableApi->get('ZikulaMultiHookModule', 'cssClassForExternalLinks', '');

        $extclass = '';
        $accessibilityHack = '';
        if (preg_match("/(^http:\/\/)/", $abac['longform']) == 1) {
            if (!empty($cssClassForExternalLinks)) {
                $extclass = ' class="' . $cssClassForExternalLinks . '"';
            }
            $accessibilityHack = ''; // not working yet: <span class="mhacconly"> ' . str_replace('"', '', __('(external link)', $dom)) . '</span>';
        }

        $longform  = $abac['longform'];
        $shortform = $abac['shortform'];
        $aid = $abac['aid'];
        $title = $abac['title'];

        $linkText = (false === $replaceLinksWithTitle ? $shortform : $title) . $accessibilityHack;
        $replace_temp = '<a' . $extclass . ' href="' . str_replace('"', '', $longform) . '" title="' . str_replace('"', '', $title) . '">' . $linkText . '</a>';

        /**
        if (true === $showEditLink) {
            $replace_temp = '<span>' . $replace_temp . '<img src="modules/MultiHook/images/edit.gif" width="7" height="7" alt="" class="multihookeditlink" title="' . str_replace('"', '', __('Edit', $dom)) . ': ' . $short . ' (' . str_replace('"', '', __('Links', $dom)) . ') #' . $aid . '" />' . '</span>';
        }
        */

        return $replace_temp;
    }

    public function create_censor($abac, $showEditLink=false, $doNotCensorFirstAndLastLetterInWordsWithMoreThanTwoChars=false)
    {
        $len = strlen($abac['shortform']);
        $replace_temp = str_repeat('*', $len);
        if (true === $doNotCensorFirstAndLastLetterInWordsWithMoreThanTwoChars && $len > 2) {
            $replace_temp[0]= $abac['shortform'][0];
            $id = strlen($replace_temp)-1;
            $replace_temp[$id] = $abac['shortform'][$len-1];
        }

        $shortform = $abac['shortform'];
        $aid = $abac['aid'];

        /**
        if (true === $showEditLink) {
            $replace_temp = '<span>' . $replace_temp . '<img src="modules/MultiHook/images/edit.gif" width="7" height="7" alt="" class="multihookeditlink" title="' . str_replace('"', '', __('Edit', $dom)) . ': ' . shortform . ' (' . str_replace('"', '', __('Censor', $dom)) . ') #' . $aid . '" />' . '</span>';
        }
        */

        return $replace_temp;
    }

    public function get_xhtml_language($lang)
    {
        return !empty($lang) ? ' lang="' . $lang . '" xml:lang="' . $lang . '"' : '';
    }

    public function absolute_url($url='', $baseUrl='')
    {
        static $schemes = ['http', 'https', 'ftp', 'gopher', 'ed2k', 'news', 'mailto', 'telnet'];

        if (strlen($url) == 0) {
            return $url;
        }

        // make sure that relative urls get converted to absolute urls (safehtml needs this)
        $exploded_url = explode(':', $url);
        if (!in_array($exploded_url[0], $schemes)) {
            // url does not start with one of the schemes defined above
            // we consider it being a relative path now

            // next check for leading / in  relative url
            if ($url[0] == '/') {
                // and remove it
                $url = substr($url, 1);
            }
            $url = $baseUrl . $url;
        }

        return $url;
    }
}
