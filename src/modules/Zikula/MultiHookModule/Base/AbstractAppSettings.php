<?php
/**
 * MultiHook.
 *
 * @copyright Zikula Team (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Zikula Team <info@ziku.la>.
 * @link https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

namespace Zikula\MultiHookModule\Base;

use Symfony\Component\Validator\Constraints as Assert;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;

/**
 * Application settings class for handling module variables.
 */
abstract class AbstractAppSettings
{
    /**
     * @var VariableApiInterface
     */
    protected $variableApi;
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var bool $showEditLink
     */
    protected $showEditLink = true;
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var bool $replaceOnlyFirstInstanceOfItems
     */
    protected $replaceOnlyFirstInstanceOfItems = false;
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var bool $applyReplacementsToCodeTags
     */
    protected $applyReplacementsToCodeTags = false;
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var bool $replaceAbbreviations
     */
    protected $replaceAbbreviations = true;
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var bool $replaceAcronyms
     */
    protected $replaceAcronyms = true;
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var bool $replaceAbbreviationsWithLongText
     */
    protected $replaceAbbreviationsWithLongText = false;
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var bool $replaceLinks
     */
    protected $replaceLinks = true;
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var bool $replaceLinksWithTitle
     */
    protected $replaceLinksWithTitle = false;
    
    /**
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $cssClassForExternalLinks
     */
    protected $cssClassForExternalLinks = '';
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var bool $replaceCensoredWords
     */
    protected $replaceCensoredWords = true;
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var bool $replaceCensoredWordsWhenTheyArePartOfOtherWords
     */
    protected $replaceCensoredWordsWhenTheyArePartOfOtherWords = false;
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var bool $doNotCensorFirstAndLastLetterInWordsWithMoreThanTwoChars
     */
    protected $doNotCensorFirstAndLastLetterInWordsWithMoreThanTwoChars = false;
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var bool $replaceNeedles
     */
    protected $replaceNeedles = true;
    
    /**
     * The amount of entries shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var int $entryEntriesPerPage
     */
    protected $entryEntriesPerPage = 10;
    
    /**
     * Whether only own entries should be shown on view pages by default or not
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var bool $showOnlyOwnEntries
     */
    protected $showOnlyOwnEntries = false;
    
    /**
     * Whether to allow moderators choosing a user which will be set as creator.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var bool $allowModerationSpecificCreatorForEntry
     */
    protected $allowModerationSpecificCreatorForEntry = false;
    
    /**
     * Whether to allow moderators choosing a custom creation date.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var bool $allowModerationSpecificCreationDateForEntry
     */
    protected $allowModerationSpecificCreationDateForEntry = false;
    
    
    public function __construct(
        VariableApiInterface $variableApi
    ) {
        $this->variableApi = $variableApi;
    
        $this->load();
    }
    
    /**
     * Returns the show edit link.
     *
     * @return bool
     */
    public function getShowEditLink()
    {
        return $this->showEditLink;
    }
    
    /**
     * Sets the show edit link.
     *
     * @param bool $showEditLink
     *
     * @return void
     */
    public function setShowEditLink($showEditLink)
    {
        if ((bool)$this->showEditLink !== (bool)$showEditLink) {
            $this->showEditLink = (bool)$showEditLink;
        }
    }
    
    /**
     * Returns the replace only first instance of items.
     *
     * @return bool
     */
    public function getReplaceOnlyFirstInstanceOfItems()
    {
        return $this->replaceOnlyFirstInstanceOfItems;
    }
    
    /**
     * Sets the replace only first instance of items.
     *
     * @param bool $replaceOnlyFirstInstanceOfItems
     *
     * @return void
     */
    public function setReplaceOnlyFirstInstanceOfItems($replaceOnlyFirstInstanceOfItems)
    {
        if ((bool)$this->replaceOnlyFirstInstanceOfItems !== (bool)$replaceOnlyFirstInstanceOfItems) {
            $this->replaceOnlyFirstInstanceOfItems = (bool)$replaceOnlyFirstInstanceOfItems;
        }
    }
    
    /**
     * Returns the apply replacements to code tags.
     *
     * @return bool
     */
    public function getApplyReplacementsToCodeTags()
    {
        return $this->applyReplacementsToCodeTags;
    }
    
    /**
     * Sets the apply replacements to code tags.
     *
     * @param bool $applyReplacementsToCodeTags
     *
     * @return void
     */
    public function setApplyReplacementsToCodeTags($applyReplacementsToCodeTags)
    {
        if ((bool)$this->applyReplacementsToCodeTags !== (bool)$applyReplacementsToCodeTags) {
            $this->applyReplacementsToCodeTags = (bool)$applyReplacementsToCodeTags;
        }
    }
    
    /**
     * Returns the replace abbreviations.
     *
     * @return bool
     */
    public function getReplaceAbbreviations()
    {
        return $this->replaceAbbreviations;
    }
    
    /**
     * Sets the replace abbreviations.
     *
     * @param bool $replaceAbbreviations
     *
     * @return void
     */
    public function setReplaceAbbreviations($replaceAbbreviations)
    {
        if ((bool)$this->replaceAbbreviations !== (bool)$replaceAbbreviations) {
            $this->replaceAbbreviations = (bool)$replaceAbbreviations;
        }
    }
    
    /**
     * Returns the replace acronyms.
     *
     * @return bool
     */
    public function getReplaceAcronyms()
    {
        return $this->replaceAcronyms;
    }
    
    /**
     * Sets the replace acronyms.
     *
     * @param bool $replaceAcronyms
     *
     * @return void
     */
    public function setReplaceAcronyms($replaceAcronyms)
    {
        if ((bool)$this->replaceAcronyms !== (bool)$replaceAcronyms) {
            $this->replaceAcronyms = (bool)$replaceAcronyms;
        }
    }
    
    /**
     * Returns the replace abbreviations with long text.
     *
     * @return bool
     */
    public function getReplaceAbbreviationsWithLongText()
    {
        return $this->replaceAbbreviationsWithLongText;
    }
    
    /**
     * Sets the replace abbreviations with long text.
     *
     * @param bool $replaceAbbreviationsWithLongText
     *
     * @return void
     */
    public function setReplaceAbbreviationsWithLongText($replaceAbbreviationsWithLongText)
    {
        if ((bool)$this->replaceAbbreviationsWithLongText !== (bool)$replaceAbbreviationsWithLongText) {
            $this->replaceAbbreviationsWithLongText = (bool)$replaceAbbreviationsWithLongText;
        }
    }
    
    /**
     * Returns the replace links.
     *
     * @return bool
     */
    public function getReplaceLinks()
    {
        return $this->replaceLinks;
    }
    
    /**
     * Sets the replace links.
     *
     * @param bool $replaceLinks
     *
     * @return void
     */
    public function setReplaceLinks($replaceLinks)
    {
        if ((bool)$this->replaceLinks !== (bool)$replaceLinks) {
            $this->replaceLinks = (bool)$replaceLinks;
        }
    }
    
    /**
     * Returns the replace links with title.
     *
     * @return bool
     */
    public function getReplaceLinksWithTitle()
    {
        return $this->replaceLinksWithTitle;
    }
    
    /**
     * Sets the replace links with title.
     *
     * @param bool $replaceLinksWithTitle
     *
     * @return void
     */
    public function setReplaceLinksWithTitle($replaceLinksWithTitle)
    {
        if ((bool)$this->replaceLinksWithTitle !== (bool)$replaceLinksWithTitle) {
            $this->replaceLinksWithTitle = (bool)$replaceLinksWithTitle;
        }
    }
    
    /**
     * Returns the css class for external links.
     *
     * @return string
     */
    public function getCssClassForExternalLinks()
    {
        return $this->cssClassForExternalLinks;
    }
    
    /**
     * Sets the css class for external links.
     *
     * @param string $cssClassForExternalLinks
     *
     * @return void
     */
    public function setCssClassForExternalLinks($cssClassForExternalLinks)
    {
        if ($this->cssClassForExternalLinks !== $cssClassForExternalLinks) {
            $this->cssClassForExternalLinks = isset($cssClassForExternalLinks) ? $cssClassForExternalLinks : '';
        }
    }
    
    /**
     * Returns the replace censored words.
     *
     * @return bool
     */
    public function getReplaceCensoredWords()
    {
        return $this->replaceCensoredWords;
    }
    
    /**
     * Sets the replace censored words.
     *
     * @param bool $replaceCensoredWords
     *
     * @return void
     */
    public function setReplaceCensoredWords($replaceCensoredWords)
    {
        if ((bool)$this->replaceCensoredWords !== (bool)$replaceCensoredWords) {
            $this->replaceCensoredWords = (bool)$replaceCensoredWords;
        }
    }
    
    /**
     * Returns the replace censored words when they are part of other words.
     *
     * @return bool
     */
    public function getReplaceCensoredWordsWhenTheyArePartOfOtherWords()
    {
        return $this->replaceCensoredWordsWhenTheyArePartOfOtherWords;
    }
    
    /**
     * Sets the replace censored words when they are part of other words.
     *
     * @param bool $replaceCensoredWordsWhenTheyArePartOfOtherWords
     *
     * @return void
     */
    public function setReplaceCensoredWordsWhenTheyArePartOfOtherWords($replaceCensoredWordsWhenTheyArePartOfOtherWords)
    {
        if ((bool)$this->replaceCensoredWordsWhenTheyArePartOfOtherWords !== (bool)$replaceCensoredWordsWhenTheyArePartOfOtherWords) {
            $this->replaceCensoredWordsWhenTheyArePartOfOtherWords = (bool)$replaceCensoredWordsWhenTheyArePartOfOtherWords;
        }
    }
    
    /**
     * Returns the do not censor first and last letter in words with more than two chars.
     *
     * @return bool
     */
    public function getDoNotCensorFirstAndLastLetterInWordsWithMoreThanTwoChars()
    {
        return $this->doNotCensorFirstAndLastLetterInWordsWithMoreThanTwoChars;
    }
    
    /**
     * Sets the do not censor first and last letter in words with more than two chars.
     *
     * @param bool $doNotCensorFirstAndLastLetterInWordsWithMoreThanTwoChars
     *
     * @return void
     */
    public function setDoNotCensorFirstAndLastLetterInWordsWithMoreThanTwoChars($doNotCensorFirstAndLastLetterInWordsWithMoreThanTwoChars)
    {
        if ((bool)$this->doNotCensorFirstAndLastLetterInWordsWithMoreThanTwoChars !== (bool)$doNotCensorFirstAndLastLetterInWordsWithMoreThanTwoChars) {
            $this->doNotCensorFirstAndLastLetterInWordsWithMoreThanTwoChars = (bool)$doNotCensorFirstAndLastLetterInWordsWithMoreThanTwoChars;
        }
    }
    
    /**
     * Returns the replace needles.
     *
     * @return bool
     */
    public function getReplaceNeedles()
    {
        return $this->replaceNeedles;
    }
    
    /**
     * Sets the replace needles.
     *
     * @param bool $replaceNeedles
     *
     * @return void
     */
    public function setReplaceNeedles($replaceNeedles)
    {
        if ((bool)$this->replaceNeedles !== (bool)$replaceNeedles) {
            $this->replaceNeedles = (bool)$replaceNeedles;
        }
    }
    
    /**
     * Returns the entry entries per page.
     *
     * @return int
     */
    public function getEntryEntriesPerPage()
    {
        return $this->entryEntriesPerPage;
    }
    
    /**
     * Sets the entry entries per page.
     *
     * @param int $entryEntriesPerPage
     *
     * @return void
     */
    public function setEntryEntriesPerPage($entryEntriesPerPage)
    {
        if ((int)$this->entryEntriesPerPage !== (int)$entryEntriesPerPage) {
            $this->entryEntriesPerPage = (int)$entryEntriesPerPage;
        }
    }
    
    /**
     * Returns the show only own entries.
     *
     * @return bool
     */
    public function getShowOnlyOwnEntries()
    {
        return $this->showOnlyOwnEntries;
    }
    
    /**
     * Sets the show only own entries.
     *
     * @param bool $showOnlyOwnEntries
     *
     * @return void
     */
    public function setShowOnlyOwnEntries($showOnlyOwnEntries)
    {
        if ((bool)$this->showOnlyOwnEntries !== (bool)$showOnlyOwnEntries) {
            $this->showOnlyOwnEntries = (bool)$showOnlyOwnEntries;
        }
    }
    
    /**
     * Returns the allow moderation specific creator for entry.
     *
     * @return bool
     */
    public function getAllowModerationSpecificCreatorForEntry()
    {
        return $this->allowModerationSpecificCreatorForEntry;
    }
    
    /**
     * Sets the allow moderation specific creator for entry.
     *
     * @param bool $allowModerationSpecificCreatorForEntry
     *
     * @return void
     */
    public function setAllowModerationSpecificCreatorForEntry($allowModerationSpecificCreatorForEntry)
    {
        if ((bool)$this->allowModerationSpecificCreatorForEntry !== (bool)$allowModerationSpecificCreatorForEntry) {
            $this->allowModerationSpecificCreatorForEntry = (bool)$allowModerationSpecificCreatorForEntry;
        }
    }
    
    /**
     * Returns the allow moderation specific creation date for entry.
     *
     * @return bool
     */
    public function getAllowModerationSpecificCreationDateForEntry()
    {
        return $this->allowModerationSpecificCreationDateForEntry;
    }
    
    /**
     * Sets the allow moderation specific creation date for entry.
     *
     * @param bool $allowModerationSpecificCreationDateForEntry
     *
     * @return void
     */
    public function setAllowModerationSpecificCreationDateForEntry($allowModerationSpecificCreationDateForEntry)
    {
        if ((bool)$this->allowModerationSpecificCreationDateForEntry !== (bool)$allowModerationSpecificCreationDateForEntry) {
            $this->allowModerationSpecificCreationDateForEntry = (bool)$allowModerationSpecificCreationDateForEntry;
        }
    }
    
    
    /**
     * Loads module variables from the database.
     */
    protected function load()
    {
        $moduleVars = $this->variableApi->getAll('ZikulaMultiHookModule');
    
        if (isset($moduleVars['showEditLink'])) {
            $this->setShowEditLink($moduleVars['showEditLink']);
        }
        if (isset($moduleVars['replaceOnlyFirstInstanceOfItems'])) {
            $this->setReplaceOnlyFirstInstanceOfItems($moduleVars['replaceOnlyFirstInstanceOfItems']);
        }
        if (isset($moduleVars['applyReplacementsToCodeTags'])) {
            $this->setApplyReplacementsToCodeTags($moduleVars['applyReplacementsToCodeTags']);
        }
        if (isset($moduleVars['replaceAbbreviations'])) {
            $this->setReplaceAbbreviations($moduleVars['replaceAbbreviations']);
        }
        if (isset($moduleVars['replaceAcronyms'])) {
            $this->setReplaceAcronyms($moduleVars['replaceAcronyms']);
        }
        if (isset($moduleVars['replaceAbbreviationsWithLongText'])) {
            $this->setReplaceAbbreviationsWithLongText($moduleVars['replaceAbbreviationsWithLongText']);
        }
        if (isset($moduleVars['replaceLinks'])) {
            $this->setReplaceLinks($moduleVars['replaceLinks']);
        }
        if (isset($moduleVars['replaceLinksWithTitle'])) {
            $this->setReplaceLinksWithTitle($moduleVars['replaceLinksWithTitle']);
        }
        if (isset($moduleVars['cssClassForExternalLinks'])) {
            $this->setCssClassForExternalLinks($moduleVars['cssClassForExternalLinks']);
        }
        if (isset($moduleVars['replaceCensoredWords'])) {
            $this->setReplaceCensoredWords($moduleVars['replaceCensoredWords']);
        }
        if (isset($moduleVars['replaceCensoredWordsWhenTheyArePartOfOtherWords'])) {
            $this->setReplaceCensoredWordsWhenTheyArePartOfOtherWords($moduleVars['replaceCensoredWordsWhenTheyArePartOfOtherWords']);
        }
        if (isset($moduleVars['doNotCensorFirstAndLastLetterInWordsWithMoreThanTwoChars'])) {
            $this->setDoNotCensorFirstAndLastLetterInWordsWithMoreThanTwoChars($moduleVars['doNotCensorFirstAndLastLetterInWordsWithMoreThanTwoChars']);
        }
        if (isset($moduleVars['replaceNeedles'])) {
            $this->setReplaceNeedles($moduleVars['replaceNeedles']);
        }
        if (isset($moduleVars['entryEntriesPerPage'])) {
            $this->setEntryEntriesPerPage($moduleVars['entryEntriesPerPage']);
        }
        if (isset($moduleVars['showOnlyOwnEntries'])) {
            $this->setShowOnlyOwnEntries($moduleVars['showOnlyOwnEntries']);
        }
        if (isset($moduleVars['allowModerationSpecificCreatorForEntry'])) {
            $this->setAllowModerationSpecificCreatorForEntry($moduleVars['allowModerationSpecificCreatorForEntry']);
        }
        if (isset($moduleVars['allowModerationSpecificCreationDateForEntry'])) {
            $this->setAllowModerationSpecificCreationDateForEntry($moduleVars['allowModerationSpecificCreationDateForEntry']);
        }
    }
    
    /**
     * Saves module variables into the database.
     */
    public function save()
    {
        $this->variableApi->set('ZikulaMultiHookModule', 'showEditLink', $this->getShowEditLink());
        $this->variableApi->set('ZikulaMultiHookModule', 'replaceOnlyFirstInstanceOfItems', $this->getReplaceOnlyFirstInstanceOfItems());
        $this->variableApi->set('ZikulaMultiHookModule', 'applyReplacementsToCodeTags', $this->getApplyReplacementsToCodeTags());
        $this->variableApi->set('ZikulaMultiHookModule', 'replaceAbbreviations', $this->getReplaceAbbreviations());
        $this->variableApi->set('ZikulaMultiHookModule', 'replaceAcronyms', $this->getReplaceAcronyms());
        $this->variableApi->set('ZikulaMultiHookModule', 'replaceAbbreviationsWithLongText', $this->getReplaceAbbreviationsWithLongText());
        $this->variableApi->set('ZikulaMultiHookModule', 'replaceLinks', $this->getReplaceLinks());
        $this->variableApi->set('ZikulaMultiHookModule', 'replaceLinksWithTitle', $this->getReplaceLinksWithTitle());
        $this->variableApi->set('ZikulaMultiHookModule', 'cssClassForExternalLinks', $this->getCssClassForExternalLinks());
        $this->variableApi->set('ZikulaMultiHookModule', 'replaceCensoredWords', $this->getReplaceCensoredWords());
        $this->variableApi->set('ZikulaMultiHookModule', 'replaceCensoredWordsWhenTheyArePartOfOtherWords', $this->getReplaceCensoredWordsWhenTheyArePartOfOtherWords());
        $this->variableApi->set('ZikulaMultiHookModule', 'doNotCensorFirstAndLastLetterInWordsWithMoreThanTwoChars', $this->getDoNotCensorFirstAndLastLetterInWordsWithMoreThanTwoChars());
        $this->variableApi->set('ZikulaMultiHookModule', 'replaceNeedles', $this->getReplaceNeedles());
        $this->variableApi->set('ZikulaMultiHookModule', 'entryEntriesPerPage', $this->getEntryEntriesPerPage());
        $this->variableApi->set('ZikulaMultiHookModule', 'showOnlyOwnEntries', $this->getShowOnlyOwnEntries());
        $this->variableApi->set('ZikulaMultiHookModule', 'allowModerationSpecificCreatorForEntry', $this->getAllowModerationSpecificCreatorForEntry());
        $this->variableApi->set('ZikulaMultiHookModule', 'allowModerationSpecificCreationDateForEntry', $this->getAllowModerationSpecificCreationDateForEntry());
    }
}
