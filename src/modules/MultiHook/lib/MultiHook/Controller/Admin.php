<?php
/**
 * Multihook
 *
 * @copyright (c) 2001-now, Multihook Development Team
 * @link http://code.zikula.org/multihook
 * @version $Id: Admin.php -1   $
 * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 * @package Multihook
 */

class MultiHook_Controller_Admin extends Zikula_AbstractController
{
    public function postInitialize()
    {
        $this->view->setCaching(false)->add_core_data();
    }

    /**
     * the main administration function
     */
    public function main()
    {
        if (!SecurityUtil::checkPermission('MultiHook::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError(System::getVar('entrypoint', 'index.php'));
        }
    
        // Create output object
        $form = FormUtil::newForm('MultiHook', $this);
    
        // Return the output that has been generated by this function
        return $form->execute('mh_admin_config.html', new MultiHook_Form_Handler_Admin_ModifyConfig());
    }
    
    /**
     * add new item
     */
    public function edit()
    {
        // Security check
        if (!SecurityUtil::checkPermission('MultiHook::', '::', ACCESS_ADD)) {
            return LogUtil::registerPermissionError(System::getVar('entrypoint', 'index.php'));
        }
        // Create pnForm output object
        $form = FormUtil::newForm('MultiHook', $this);
    
        // Return the output that has been generated by this function
        return $form->execute('mh_admin_edit.html', new MultiHook_Form_Handler_Admin_Edit());
    }
    
    /**
     * view items
     *
     *@params filter (int) 0=abbr, 1=acronyms, 2=links
     */
    public function view()
    {
        if (!SecurityUtil::checkPermission('MultiHook::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError(System::getVar('entrypoint', 'index.php'));
        }
    
        // Get parameters from whatever input we need
        $startnum = (int)FormUtil::getPassedValue('startnum', 0, 'GETPOST');
        $filter   = (int)FormUtil::getPassedValue('filter', -1, 'GETPOST');
    
        // The user API function is called
        $abacs = ModUtil::apiFunc('MultiHook', 'user', 'getall',
                                  array('startnum' => $startnum,
                                        'filter'   => $filter,
                                        'numitems' => $this->getVar('itemsperpage')));
        // set permission flags
        for($cnt=0; $cnt<count($abacs); $cnt++ ) {
            $abacs[$cnt]['edit'] = false;
            $abacs[$cnt]['delete'] = false;
    
            if (SecurityUtil::checkPermission('MultiHook::', "$abacs[$cnt][short]::$abacs[$cnt][aid]", ACCESS_EDIT)) {
                $abacs[$cnt]['edit'] = true;
                if (SecurityUtil::checkPermission('MultiHook::', "$abacs[$cnt][short]::$abacs[$cnt][aid]", ACCESS_DELETE)) {
                    $abacs[$cnt]['delete'] = true;
                }
            }
        }
        $titles = array( __('Abbreviations list'),
                         __('Acronyms list'),
                         __('Links list'),
                         __('Censored words list'));
    
        // Create output object
        $this->view->assign('abacs', $abacs);
        $this->view->assign('title', $titles[$filter]);
        $this->view->assign('filter', $filter);
        $this->view->assign('abacscount', ModUtil::apiFunc('MultiHook', 'user', 'countitems', array('filter' => $filter)));
        return $this->view->fetch('mh_admin_view.html');
    }
        
    /**
     * viewneedles
     *
     * shows a list of all needles supported by the MultiHook
     */
    public function viewneedles()
    {
        if (!SecurityUtil::checkPermission('MultiHook::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError(System::getVar('entrypoint', 'index.php'));
        }
    
        $needles = ModUtil::apiFunc('MultiHook', 'admin', 'collectneedles');
    
        $this->view->assign('needles', $needles);
        return $this->view->fetch('mh_admin_viewneedles.html');
    }
}
