<?php
// $Id$
// ----------------------------------------------------------------------
// LICENSE
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License (GPL)
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// To read the license please visit http://www.gnu.org/copyleft/gpl.html
// ----------------------------------------------------------------------
// Original Author of file: Frank Schummertz
// Purpose of file:  MultiHook administration display functions
// ----------------------------------------------------------------------

/**
 * the main administration function
 */
function MultiHook_admin_main()
{
    if(!SecurityUtil::checkPermission('MultiHook::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError('index.php');
    }
    
    $pnr = pnRender::getInstance('MultiHook', false);
    $hmods = pnModAPIFunc('modules', 'admin', 'gethookedmodules', array('hookmodname' => 'MultiHook'));
    foreach($hmods as $hmod => $dummy) {
        $modid = pnModGetIDFromName($hmod);
        $moddata = pnModGetInfo($modid);
        $moddata['id'] = $modid;
        $hookedmodules[] = $moddata;
    }
    $pnr->assign('hookedmodules', $hookedmodules);
    return $pnr->fetch("mh_admin_main.html");
}

/**
 * add new item
 */
function MultiHook_admin_edit($args)
{
    // Security check
    if (!SecurityUtil::checkPermission('MultiHook::', '::', ACCESS_ADD)) {
        return LogUtil::registerPermissionError(pnModURL('MultiHook', 'admin', 'main'));
    }
    // load edithandler class from file
    Loader::requireOnce('modules/MultiHook/pnincludes/mh_admin_edithandler.class.php');

    // Create pnForm output object
    $pnf = FormUtil::newpnForm('MultiHook');

    // Return the output that has been generated by this function
    return $pnf->pnFormExecute('mh_admin_edit.html', new MultiHook_admin_edithandler());
}

/**
 * view items
 *
 *@params filter (int) 0=abbr, 1=acronyms, 2=links
 */
function MultiHook_admin_view()
{
    if (!SecurityUtil::checkPermission('MultiHook::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError(pnModURL('MultiHook', 'admin', 'main'));
    }

    // Get parameters from whatever input we need
    $startnum = (int)FormUtil::getPassedValue('startnum', 0, 'GETPOST');
    $filter   = (int)FormUtil::getPassedValue('filter', -1, 'GETPOST');

    // The user API function is called
    $abacs = pnModAPIFunc('MultiHook',
                          'user',
                          'getall',
                          array('startnum' => $startnum,
                                'filter'   => $filter,
                                'numitems' => pnModGetVar('MultiHook',
                                                          'itemsperpage')));
    // set permission flags
    for($cnt=0; $cnt<count($abacs); $cnt++ ) {
        $abacs[$cnt]['edit'] = false;
        $abacs[$cnt]['delete'] = false;

        if (SecurityUtil::checkPermission('MultiHook::', "$abacs[$cnt][short]::$abacs[$cnt][aid]", ACCESS_EDIT)) {
            $abacs[$cnt]['edit'] = true;
            if (SecurityUtil::checkPermission('MultiHook::', "$abacs[$cnt][short]::$abacs[$cnt][aid]", ACCESS_DELETE)) {
                $abacs[$cnt]['delete'] = true;
            }
        }
    }
    $titles = array( _MH_VIEWABBR,
                     _MH_VIEWACRONYMS,
                     _MH_VIEWLINKS,
                     _MH_VIEWILLEGALWORDS );

    // Create output object
    $pnr = pnRender::getInstance('MultiHook', false);
    $pnr->add_core_data();
    $pnr->assign('abacs', $abacs);
    $pnr->assign('title', $titles[$filter]);
    $pnr->assign('filter', $filter);
    $pnr->assign('abacscount', pnModAPIFunc('MultiHook', 'user', 'countitems', array('filter' => $filter)));
    return $pnr->fetch('mh_admin_view.html');
}

/**
 * modify configuration
 */
function MultiHook_admin_modifyconfig()
{

    if (!SecurityUtil::checkPermission('MultiHook::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError(pnModURL('MultiHook', 'admin', 'main'));
    }
    
    Loader::requireOnce('modules/MultiHook/pnincludes/mh_admin_modifyconfighandler.class.php');

    // Create output object
    $pnf = FormUtil::newpnForm('MultiHook');

    // Return the output that has been generated by this function
    return $pnf->pnFormExecute('mh_admin_config.html', new MultiHook_admin_modifyconfighandler());
}

/**
 * viewneedles
 *
 * shows a list of all needles supported by the MultiHook
 */
function MultiHook_admin_viewneedles()
{
    if (!SecurityUtil::checkPermission('MultiHook::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError(pnModURL('MultiHook', 'admin', 'main'));
    }
    
    $needles = pnModAPIFunc('MultiHook', 'admin', 'collectneedles');
  
    $pnr = pnRender::getInstance('MultiHook', false);
    $pnr->assign('needles', $needles);
    return $pnr->fetch('mh_admin_viewneedles.html');    
}

?>